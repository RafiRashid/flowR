shiny::runApp()
runApp()
runApp()
runApp()
runApp()
rum <- read_fst("data/passages.fst")
od_data <- read_fst("data/od_data.fst")
dropdown <- rum %>%
count(hopital, secteur_med, ServiceGroup, umaGroup) %>%
select(-n)
View(dropdown)
od_data %>%
select(-c(secteur_med,destination)) %>%
full_join(dropdown %>% select(ServiceGroup, secteur_med), by = c("origine" = "ServiceGroup")) %>%
mutate(secteur_med = case_when(origine %in% c("SAU", "SAU (autre établissement)") ~ "Urgences",
origine %in% c("MCO (sauf réa)", "Réa", "SSR", "SLD", "PSY", "HAD") ~ "Mutation / transfert",
origine %in% c("Structure d'hébergement médicosociale", "Domicile", "Naissance") ~ "Autres",
TRUE ~ secteur_med)) %>%
count(hopital, secteur_med, origine) %>%
select(-n)
od_data
od_data %>%
select(-c(secteur_med,destination))
od_data %>%
select(-c(secteur_med,destination)) %>%
left_join(dropdown %>% select(ServiceGroup, secteur_med), by = join_by(origine == ServiceGroup)) %>%
mutate(secteur_med = case_when(origine %in% c("SAU", "SAU (autre établissement)") ~ "Urgences",
origine %in% c("MCO (sauf réa)", "Réa", "SSR", "SLD", "PSY", "HAD") ~ "Mutation / transfert",
origine %in% c("Structure d'hébergement médicosociale", "Domicile", "Naissance") ~ "Autres",
TRUE ~ secteur_med)) %>%
count(hopital, secteur_med, origine) %>%
select(-n)
od_data %>%
select(-c(secteur_med,destination)) %>%
left_join(dropdown %>% select(ServiceGroup, secteur_med), by = join_by(origine == ServiceGroup),multiple = "any") %>%
mutate(secteur_med = case_when(origine %in% c("SAU", "SAU (autre établissement)") ~ "Urgences",
origine %in% c("MCO (sauf réa)", "Réa", "SSR", "SLD", "PSY", "HAD") ~ "Mutation / transfert",
origine %in% c("Structure d'hébergement médicosociale", "Domicile", "Naissance") ~ "Autres",
TRUE ~ secteur_med)) %>%
count(hopital, secteur_med, origine) %>%
select(-n)
runApp()
remove.packages("shinybulma")
library(shinydashboard)
detach("package:shinydashboard", unload = TRUE)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("bsicons")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(odSLS)
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- page_navbar(
title = HTML('<img src="actimed_logo2.png" width="200px" height="50px">'),
theme = bs_theme() %>%
bs_add_rules(sass::sass_file("www/style.scss")),
sidebar = sidebar(
title = "Histogram controls",
selectInput("hopitalInput", "Selectionner l'hôpital :", choices = unique(dropdown$hopital), selected = "Saint Louis")
),
nav_spacer(),
# PAGE FLUX HOPITAL -----------------------
nav_panel("Flux service",
card(
card_header(
"Chord Diagram",
class = "bg-light d-flex align-items-center gap-1",
tooltip(
bsicons::bs_icon("question-circle"),
tags$div(tags$p("Une couleur représente un secteur médical."),
tags$p("Un noeud représente un service."),
tags$p("Un secteur regroupe plusieurs services."),
tags$p("Une liaison représente un flux entre 2 services avec un nombre de passages n."),
tags$p("Il est possible de choisir explicitement les services d'origine et de destination pour visualiser les flux (si ils existent !)."),
tags$p("Le sens du flux peut être choisi (si le flux existe). Par exemple, le flux SAU > UHCD existe mais le flux UHCD > SAU n'existe pas."),
tags$p("En type 'Flux principaux', la taille des noeuds et des flux sont proportionnels en volumes."),
),
placement = "right"
),
popover(
bsicons::bs_icon("gear", class = "ms-auto"),
prettyRadioButtons(inputId = "typeflux",
label = "Type de flux",
choices = c("Ensemble des flux","Flux principaux"),
selected = "Flux principaux",
status = "info",
animation = "pulse"),
virtualSelectInput(inputId = "fluxServiceOrigineInput",
label = "Origine",
choices = prepare_choices(.data = dropdownOrigineFlux,
label = origine,
value = origine,
group_by = secteur_med,
description = hopital),
selected = unique(dropdownOrigineFlux$origine),
multiple = TRUE,
search = TRUE,
hasOptionDescription = TRUE,
placeholder = "Sélectionner...",
searchPlaceholderText = "Rechercher...",
noSearchResultsText = "Aucun service trouvé",
noOptionsText = "Aucun service",
optionsSelectedText = "service sélectionné",
width = "100%"),
virtualSelectInput(inputId = "fluxServiceDestinationInput",
label = "Destination",
choices = prepare_choices(.data = dropdownDestinationFlux,
label = destination,
value = destination,
group_by = secteur_med,
description = hopital),
selected = unique(dropdownDestinationFlux$destination),
multiple = TRUE,
search = TRUE,
hasOptionDescription = TRUE,
placeholder = "Sélectionner...",
searchPlaceholderText = "Rechercher...",
noSearchResultsText = "Aucun service trouvé",
noOptionsText = "Aucun service",
optionsSelectedText = "service sélectionné",
width = "100%"),
"Sens",
switchInput(inputId = "sensInput",
onLabel = "⬅",
offLabel = "➡",
label = " ",
value = TRUE),
title = "Options graphiques"
)
),
chordUI("fluxService")
)
),
# PAGE FLUX HOPITAL -----------------------
nav_panel("Flux hôpital",
card(
card_header(
"Chord Diagram Hospital",
class = "bg-light d-flex align-items-center gap-1",
tooltip(
bsicons::bs_icon("question-circle"),
tags$div(tags$p("La question est : combien de patient s'échangent les deux sites ?"),
tags$p("Chaque IPP a exactement 1 séjour dans chaque hôpital sur la même année."),
tags$p("Les dates de sortie et d'entrée se juxtaposent : date de sortie du séjour dans l'hôpital 1 = date d'entrée du séjour dans l'hôpital 2."),
),
placement = "right"
),
popover(
bsicons::bs_icon("gear", class = "ms-auto"),
"Sens",
switchInput(inputId = "sensHopitalInput",
onLabel = "⬅",
offLabel = "➡",
label = " ",
value = TRUE),
title = "Options graphiques"
)
),
chordHopitalUI("fluxHopital")
)
),
nav_panel("Structures"),
nav_spacer(),
nav_item(actionBttn("show","", style = "material-circle", color = "primary", size = "xs", icon = bsicons::bs_icon("info")))
)
runApp()
filter(dropdownOrigineFlux, hopital == "Saint Louis")$origine)
filter(dropdownOrigineFlux, hopital == "Saint Louis")$origine
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# MODULES ---------------------------------------------------------------------------------------------------------------
output$updateDropdownOrigine <- renderPrint(input$fluxServiceOrigineInput)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rum <- read_fst("data/passages.fst")
cim <- read_fst("data/cim.fst")
ccam <- read_fst("data/ccam.fst")
ghm <- read_fst("data/ghm.fst")
od_data <- read_fst("data/od_data.fst")
od_data_hopitaux <- read_fst("data/od_data_hopitaux.fst")
tarifs_mco_ghs <- read_fst("data/tarifs_ghs.fst")
tarifs_mco_supplements <- read_fst("data/tarifs_supplements.fst")
dropdown <- rum %>%
count(hopital, secteur_med, ServiceGroup, umaGroup) %>%
select(-n)
dropdownOrigineFlux <- od_data %>%
select(-c(secteur_med,destination)) %>%
left_join(dropdown %>% select(ServiceGroup, secteur_med), by = join_by(origine == ServiceGroup), multiple = "any") %>%
mutate(secteur_med = case_when(origine %in% c("SAU", "SAU (autre établissement)") ~ "Urgences",
origine %in% c("MCO (sauf réa)", "Réa", "SSR", "SLD", "PSY", "HAD") ~ "Mutation / transfert",
origine %in% c("Structure d'hébergement médicosociale", "Domicile", "Naissance") ~ "Autres",
TRUE ~ secteur_med)) %>%
count(hopital, secteur_med, origine) %>%
select(-n)
dropdownDestinationFlux <- od_data %>%
count(hopital, secteur_med, destination) %>%
select(-n)
fst::write.fst(dropdown, path = "dropdown.fst")
fst::write.fst(dropdownOrigineFlux, path = "dropdownOrigineFlux.fst")
fst::write.fst(dropdownDestinationFlux, path = "dropdownDestinationFlux.fst")
od_data <- read_fst("data/od_data.fst")
od_data_hopitaux <- read_fst("data/od_data_hopitaux.fst")
dropdown <- read_fst("data/dropdown.fst")
dropdownOrigineFlux <- read_fst("data/dropdownOrigineFlux.fst")
dropdownDestinationFlux <- read_fst("data/dropdownDestinationFlux.fst")
cim <- read_fst("data/cim.fst")
ccam <- read_fst("data/ccam.fst")
ghm <- read_fst("data/ghm.fst")
tarifs_mco_ghs <- read_fst("data/tarifs_ghs.fst")
tarifs_mco_supplements <- read_fst("data/tarifs_supplements.fst")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
